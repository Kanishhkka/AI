#include <iostream>

using namespace std;

const int MAXN = 100;
int n, sum, a[MAXN];
bool found;
bool selected[MAXN];

void backtrack(int i, int curSum) {
    if (curSum == sum) {
        found = true;
        cout << "Subset that sums to " << sum << ": ";
        for (int j = 0; j < i; j++) {
            if (selected[j]) {
                cout << a[j] << " ";
            }
        }
        cout << endl;
        return;
    }
    if (i == n || curSum > sum) {
        return;
    }
    selected[i] = false;
    backtrack(i+1, curSum); // not selecting a[i]
    selected[i] = true;
    backtrack(i+1, curSum+a[i]); // selecting a[i]
}

int main() {
    cin >> n >> sum;
    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }
    found = false;
    backtrack(0, 0);
    if (!found) {
        cout << "Impossible to find a subset that sums to " << sum << endl;
    }
    return 0;
}
